-- Copyright (C) 2024 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler v0.0.0-0000000
-- VHDL Extension for HxS 1.0.21-b962bd24
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.EventCatcherIfcPackage.all;

entity EventCatcherBlk_EventCatcherIfc is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		ReadMatch : out std_logic;
		ReadAck : out std_logic;
		ReadData : out std_logic_vector(31 downto 0);
		ReadResp : out std_logic_vector(1 downto 0);
		Read : in std_logic;
		ReadAddressMatch : in std_logic;
		ReadAddressProt : in std_logic_vector(2 downto 0);
		ReadAddress : in std_logic_vector(3 downto 0);
		WriteMatch : out std_logic;
		WriteAck : out std_logic;
		WriteResp : out std_logic_vector(1 downto 0);
		Write : in std_logic;
		WriteAddrMatch : in std_logic;
		WriteAddressProt : in std_logic_vector(2 downto 0);
		WriteAddress : in std_logic_vector(3 downto 0);
		WriteData : in std_logic_vector(31 downto 0);
		WriteStrobe : in std_logic_vector(3 downto 0);
		Mask : out std_logic_vector(3 downto 0);
		CatchToBeRead : in std_logic_vector(3 downto 0);
		CatchWritten : out std_logic_vector(3 downto 0);
		WTransPulseEventCatchReg : out std_logic;
		OverrunToBeRead : in std_logic_vector(3 downto 0);
		OverrunWritten : out std_logic_vector(3 downto 0);
		WTransPulseEventOverrunReg : out std_logic
	);
end;

architecture Behavioural of EventCatcherBlk_EventCatcherIfc is

	signal PreReadData : std_logic_vector(31 downto 0);
	
	signal PreReadDataEventMaskReg : std_logic_vector(31 downto 0);
	signal PreReadAckEventMaskReg : std_logic;
	signal ReadDiffEventMaskReg : std_logic;
	signal PreWriteAckEventMaskReg : std_logic;
	signal WriteDiffEventMaskReg : std_logic;
	signal WRegMask : std_logic_vector(3 downto 0);
	signal PreMatchReadEventMaskReg : std_logic;
	signal PreMatchWriteEventMaskReg : std_logic;
	
	signal PreReadDataEventCatchReg : std_logic_vector(31 downto 0);
	signal PreReadAckEventCatchReg : std_logic;
	signal ReadDiffEventCatchReg : std_logic;
	signal PreWriteAckEventCatchReg : std_logic;
	signal WriteDiffEventCatchReg : std_logic;
	signal PreMatchReadEventCatchReg : std_logic;
	signal PreMatchWriteEventCatchReg : std_logic;
	
	signal PreReadDataEventOverrunReg : std_logic_vector(31 downto 0);
	signal PreReadAckEventOverrunReg : std_logic;
	signal ReadDiffEventOverrunReg : std_logic;
	signal PreWriteAckEventOverrunReg : std_logic;
	signal WriteDiffEventOverrunReg : std_logic;
	signal PreMatchReadEventOverrunReg : std_logic;
	signal PreMatchWriteEventOverrunReg : std_logic;

begin

	ReadMatch <= PreMatchReadEventMaskReg
		  or PreMatchReadEventCatchReg
		  or PreMatchReadEventOverrunReg;
	WriteMatch <= PreMatchWriteEventMaskReg
		  or PreMatchWriteEventCatchReg
		  or PreMatchWriteEventOverrunReg;
	
	ReadAck <= PreReadAckEventMaskReg
		or PreReadAckEventCatchReg
		or PreReadAckEventOverrunReg;
	
	WriteAck <= PreWriteAckEventMaskReg
		or PreWriteAckEventCatchReg
		or PreWriteAckEventOverrunReg;
	
	
	ReadData <= PreReadData;
	
	ReadResp <= (others => '0');
	WriteResp <= (others => '0');
	
	PreDatOutMux: process (
		PreReadDataEventMaskReg,
		PreMatchReadEventMaskReg,
		PreReadAckEventMaskReg,
		PreReadDataEventCatchReg,
		PreMatchReadEventCatchReg,
		PreReadAckEventCatchReg,
		PreReadDataEventOverrunReg,
		PreMatchReadEventOverrunReg,
		PreReadAckEventOverrunReg
	) begin
		PreReadData <= (others => '0');
		if (PreMatchReadEventMaskReg = '1' and PreReadAckEventMaskReg = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataEventMaskReg), PreReadData'LENGTH));
		elsif (PreMatchReadEventCatchReg = '1' and PreReadAckEventCatchReg = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataEventCatchReg), PreReadData'LENGTH));
		elsif (PreMatchReadEventOverrunReg = '1' and PreReadAckEventOverrunReg = '1') then
			PreReadData <= std_logic_vector(resize(unsigned(PreReadDataEventOverrunReg), PreReadData'LENGTH));
		end if;
	end process;
	
	PreMatchReadEventMaskRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(EVENTMASKREG_ADDRESS)) then
			PreMatchReadEventMaskReg <= ReadAddressMatch;
		else
			PreMatchReadEventMaskReg <= '0';
		end if;
	end process;
	
	PreMatchWriteEventMaskRegProcess : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(EVENTMASKREG_ADDRESS)) then
			PreMatchWriteEventMaskReg <= WriteAddrMatch;
		else
			PreMatchWriteEventMaskReg <= '0';
		end if;
	end process;
	
	WriteDiffEventMaskRegProcess : process (WriteAddress, Write, PreWriteAckEventMaskReg)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(EVENTMASKREG_ADDRESS)) then
			WriteDiffEventMaskReg <=  Write and not PreWriteAckEventMaskReg;
		else
			WriteDiffEventMaskReg <= '0';
		end if;
	end process;
	
	ReadDiffEventMaskRegProcess : process (ReadAddress, Read, PreReadAckEventMaskReg)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(EVENTMASKREG_ADDRESS)) then
			ReadDiffEventMaskReg <= Read and not PreReadAckEventMaskReg;
		else
			ReadDiffEventMaskReg <= '0';
		end if;
	end process;
	
	SyncPartEventMaskReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckEventMaskReg <= '0';
			PreWriteAckEventMaskReg <= '0';
			WRegMask <= EVENTENABLED;
		elsif rising_edge(Clk) then
			PreWriteAckEventMaskReg <= WriteDiffEventMaskReg;
			PreReadAckEventMaskReg <= ReadDiffEventMaskReg;
			if (WriteDiffEventMaskReg = '1') then
				if (WriteStrobe(0) = '1') then WRegMask(3 downto 0) <= WriteData(3 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxForEventMaskReg : process (
		WRegMask
	) begin
		PreReadDataEventMaskReg <= (others => '0');
		PreReadDataEventMaskReg(3 downto 0) <= WRegMask;
	end process;
	
	Mask <= WRegMask;
	
	PreMatchReadEventCatchRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(EVENTCATCHREG_ADDRESS)) then
			PreMatchReadEventCatchReg <= ReadAddressMatch;
		else
			PreMatchReadEventCatchReg <= '0';
		end if;
	end process;
	
	PreMatchWriteEventCatchRegProcess : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(EVENTCATCHREG_ADDRESS)) then
			PreMatchWriteEventCatchReg <= WriteAddrMatch;
		else
			PreMatchWriteEventCatchReg <= '0';
		end if;
	end process;
	
	WriteDiffEventCatchRegProcess : process (WriteAddress, Write, PreWriteAckEventCatchReg)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(EVENTCATCHREG_ADDRESS)) then
			WriteDiffEventCatchReg <=  Write and not PreWriteAckEventCatchReg;
		else
			WriteDiffEventCatchReg <= '0';
		end if;
	end process;
	
	ReadDiffEventCatchRegProcess : process (ReadAddress, Read, PreReadAckEventCatchReg)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(EVENTCATCHREG_ADDRESS)) then
			ReadDiffEventCatchReg <= Read and not PreReadAckEventCatchReg;
		else
			ReadDiffEventCatchReg <= '0';
		end if;
	end process;
	
	SyncPartEventCatchReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckEventCatchReg <= '0';
			PreWriteAckEventCatchReg <= '0';
		elsif rising_edge(Clk) then
			PreWriteAckEventCatchReg <= WriteDiffEventCatchReg;
			PreReadAckEventCatchReg <= ReadDiffEventCatchReg;
		end if;
	end process;
	
	DataOutPreMuxForEventCatchReg : process (
		CatchToBeRead
	) begin
		PreReadDataEventCatchReg <= (others => '0');
		PreReadDataEventCatchReg(3 downto 0) <= CatchToBeRead;
	end process;
	
	WTransPulseEventCatchReg <= WriteDiffEventCatchReg;
	
	CatchWritten <= WriteData(3 downto 0);
	
	PreMatchReadEventOverrunRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(EVENTOVERRUNREG_ADDRESS)) then
			PreMatchReadEventOverrunReg <= ReadAddressMatch;
		else
			PreMatchReadEventOverrunReg <= '0';
		end if;
	end process;
	
	PreMatchWriteEventOverrunRegProcess : process (WriteAddress, WriteAddrMatch)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(EVENTOVERRUNREG_ADDRESS)) then
			PreMatchWriteEventOverrunReg <= WriteAddrMatch;
		else
			PreMatchWriteEventOverrunReg <= '0';
		end if;
	end process;
	
	WriteDiffEventOverrunRegProcess : process (WriteAddress, Write, PreWriteAckEventOverrunReg)
	begin
		if ((unsigned(WriteAddress)/4)*4 = unsigned(EVENTOVERRUNREG_ADDRESS)) then
			WriteDiffEventOverrunReg <=  Write and not PreWriteAckEventOverrunReg;
		else
			WriteDiffEventOverrunReg <= '0';
		end if;
	end process;
	
	ReadDiffEventOverrunRegProcess : process (ReadAddress, Read, PreReadAckEventOverrunReg)
	begin
		if ((unsigned(ReadAddress)/4)*4 = unsigned(EVENTOVERRUNREG_ADDRESS)) then
			ReadDiffEventOverrunReg <= Read and not PreReadAckEventOverrunReg;
		else
			ReadDiffEventOverrunReg <= '0';
		end if;
	end process;
	
	SyncPartEventOverrunReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckEventOverrunReg <= '0';
			PreWriteAckEventOverrunReg <= '0';
		elsif rising_edge(Clk) then
			PreWriteAckEventOverrunReg <= WriteDiffEventOverrunReg;
			PreReadAckEventOverrunReg <= ReadDiffEventOverrunReg;
		end if;
	end process;
	
	DataOutPreMuxForEventOverrunReg : process (
		OverrunToBeRead
	) begin
		PreReadDataEventOverrunReg <= (others => '0');
		PreReadDataEventOverrunReg(3 downto 0) <= OverrunToBeRead;
	end process;
	
	WTransPulseEventOverrunReg <= WriteDiffEventOverrunReg;
	
	OverrunWritten <= WriteData(3 downto 0);
	
end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

entity EventCatcherIfcAxi4LiteBusController is
	port(
		Clk : in std_logic;
		Rst : in std_logic;
		AWVALID : in std_logic;
		AWADDR : in std_logic_vector(3 downto 0);
		AWPROT : in std_logic_vector(2 downto 0);
		AWREADY : out std_logic;
		WVALID : in std_logic;
		WDATA : in std_logic_vector(31 downto 0);
		WSTRB : in std_logic_vector(3 downto 0);
		WREADY : out std_logic;
		BREADY : in std_logic;
		BVALID : out std_logic;
		BRESP : out std_logic_vector(1 downto 0);
		ARVALID : in std_logic;
		ARADDR : in std_logic_vector(3 downto 0);
		ARPROT : in std_logic_vector(2 downto 0);
		ARREADY : out std_logic;
		RREADY : in std_logic;
		RVALID : out std_logic;
		RDATA : out std_logic_vector(31 downto 0);
		RRESP : out std_logic_vector(1 downto 0);
		WritePrivileged : out std_logic;
		WriteSecure : out std_logic;
		WriteInstruction : out std_logic;
		ReadPrivileged : out std_logic;
		ReadSecure : out std_logic;
		ReadInstruction : out std_logic;
		ReadMatch : in std_logic;
		ReadAck : in std_logic;
		ReadData : in std_logic_vector(31 downto 0);
		ReadResp : in std_logic_vector(1 downto 0);
		Read : out std_logic;
		ReadAddressMatch : out std_logic;
		ReadAddressProt : out std_logic_vector(2 downto 0);
		ReadAddress : out std_logic_vector(3 downto 0);
		WriteMatch : in std_logic;
		WriteAck : in std_logic;
		WriteResp : in std_logic_vector(1 downto 0);
		Write : out std_logic;
		WriteAddrMatch : out std_logic;
		WriteAddressProt : out std_logic_vector(2 downto 0);
		WriteAddress : out std_logic_vector(3 downto 0);
		WriteData : out std_logic_vector(31 downto 0);
		WriteStrobe : out std_logic_vector(3 downto 0);
		UnoccupiedAck : out std_logic;
		TimeoutAck : out std_logic
	);
end;

architecture Behavioural of EventCatcherIfcAxi4LiteBusController is

	type T_Axi4LiteWriteState is (
		Axi4LiteWriteStateIdle,
		Axi4LiteWriteStateAddress,
		Axi4LiteWriteStateData,
		Axi4LiteWriteStateResp,
		Axi4LiteWriteStateErrorResp,
		Axi4LiteWriteStateDone
	);

	type T_Axi4LiteReadState is (
		Axi4LiteReadStateIdle,
		Axi4LiteReadStateAddress,
		Axi4LiteReadStateData,
		Axi4LiteReadStateDone
	);

	signal Axi4LiteReadState : T_Axi4LiteReadState;
	signal Axi4LiteWriteState : T_Axi4LiteWriteState;

	signal ReadTimeoutCounter : unsigned(9 downto 0);
	signal WriteTimeoutCounter : unsigned(9 downto 0);

	signal ReadUnoccupiedAck : std_logic;
	signal WriteUnoccupiedAck : std_logic;
	signal ReadTimeoutAck : std_logic;
	signal WriteTimeoutAck : std_logic;
	
	signal ReadProtect : std_logic_vector(2 downto 0);
	signal WriteProtect : std_logic_vector(2 downto 0);

begin

	UnoccupiedAck <= ReadUnoccupiedAck or WriteUnoccupiedAck;
	TimeoutAck <= ReadTimeoutAck or WriteTimeoutAck;

	WritePrivileged <= WriteProtect(0);
	WriteSecure <= WriteProtect(1);
	WriteInstruction <= WriteProtect(2);
	ReadPrivileged <= ReadProtect(0);
	ReadSecure <= ReadProtect(1);
	ReadInstruction <= ReadProtect(2);
	
	WriteAddressProt <= WriteProtect;
	ReadAddressProt <= ReadProtect;

	Axi4LiteRead : process(Clk, Rst) is
	begin
		if Rst = '1' then
			ARREADY <= '0';
			RVALID <= '0';
			RDATA <= (others => '0');
			RRESP <= (others => '0');
			Read <= '0';
			ReadAddressMatch <= '0';
			ReadAddress <= (others => '0');
			ReadProtect <= (others => '0');
			ReadUnoccupiedAck <= '0';
			ReadTimeoutAck <= '0';
			ReadTimeoutCounter <= (others => '1');
			Axi4LiteReadState <= Axi4LiteReadStateIdle;
		elsif rising_edge(Clk) then
			ARREADY <= '0';
			RVALID <= '0';
			case Axi4LiteReadState is
				when Axi4LiteReadStateIdle =>
					ReadUnoccupiedAck <= '0';
					ReadTimeoutAck <= '0';
					ReadTimeoutCounter <= (others => '1');
					Read <= '0';
					ReadAddressMatch <= '0';
					ReadAddress <= (others => '0');
					ReadProtect <= (others => '0');
					if ARVALID = '1' then
						ReadAddress <= ARADDR;
						ReadProtect <= ARPROT;
						ReadAddressMatch <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateAddress;
					end if;
				when Axi4LiteReadStateAddress =>
					ARREADY <= '1';
					Axi4LiteReadState <= Axi4LiteReadStateData;
					if ReadMatch = '1' then
						Read <= '1';
					else
						ReadUnoccupiedAck <= '1';
					end if;
				when Axi4LiteReadStateData =>
					ReadTimeoutCounter <= ReadTimeoutCounter - 1;
					RDATA <= ReadData;
					RRESP <= ReadResp;
					if ReadAck = '1' then
						ReadAddressMatch <= '0';
						RVALID <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadUnoccupiedAck = '1' then
						RRESP <= "11";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadTimeoutCounter = 0 then
						ReadTimeoutAck <= '1';
						RRESP <= "10";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
				when Axi4LiteReadStateDone =>
					RVALID <= '1';
					if RREADY = '1' then
						RVALID <= '0';
						ReadAddress <= (others => '0');
						ReadProtect <= (others => '0');
						RRESP <= (others => '0');
						Read <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateIdle;
					end if;
			end case;
		end if;
	end process;

	Axi4LiteWrite : process(Clk, Rst) is
	begin
		if Rst = '1' then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			BRESP <= (others => '0');
			Write <= '0';
			WriteAddrMatch <= '0';
			WriteAddress <= (others => '0');
			WriteProtect <= (others => '0');
			WriteData <= (others => '0');
			WriteStrobe <= (others => '0');
			WriteUnoccupiedAck <= '0';
			WriteTimeoutAck <= '0';
			WriteTimeoutCounter <= (others => '1');
			Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
		elsif rising_edge(Clk) then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			case Axi4LiteWriteState is
				when Axi4LiteWriteStateIdle =>
					WriteUnoccupiedAck <= '0';
					WriteTimeoutAck <= '0';
					WriteTimeoutCounter <= (others => '1');
					Write <= '0';
					WriteAddrMatch <= '0';
					WriteAddress <= (others => '0');
					WriteProtect <= (others => '0');
					if AWVALID = '1' then
						WriteAddress <= AWADDR;
						WriteProtect <= AWPROT;
						WriteAddrMatch <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateAddress;
					end if;
				when Axi4LiteWriteStateAddress =>
					AWREADY <= '1';
					WREADY <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateData;
					if WriteMatch = '0' then
						WriteUnoccupiedAck <= '1';
					end if;
				when Axi4LiteWriteStateData =>
					WREADY <= '1';
					WriteData <= WDATA;
					WriteStrobe <= WSTRB;
					if WVALID = '1' then
						WREADY <= '0';
						if WriteUnoccupiedAck = '0' then
							Write <= '1';
							Axi4LiteWriteState <= Axi4LiteWriteStateResp;
						else
							Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
						end if;
					end if;
				when Axi4LiteWriteStateResp =>
					WriteTimeoutCounter <= WriteTimeoutCounter - 1;
					Write <= '1';
					BRESP <= WriteResp;
					if WriteAck = '1' then
						Write <= '0';
						WriteAddrMatch <= '0';
						BVALID <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					end if;
					if WriteTimeoutCounter = 0 then
						WriteTimeoutAck <= '1';
						Write <= '0';
						WriteAddrMatch <= '0';
						Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
					end if;
				when Axi4LiteWriteStateErrorResp =>
					Write <= '0';
					WriteAddrMatch <= '0';
					BVALID <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					if WriteUnoccupiedAck = '1' then
						BRESP <= "11";
					else
						BRESP <= "10";
					end if;
				when Axi4LiteWriteStateDone =>
					BVALID <= '1';
					if BREADY = '1' then
						WriteAddress <= (others => '0');
						WriteProtect <= (others => '0');
						BVALID <= '0';
						BRESP <= (others => '0');
						Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
					end if;
			end case;
		end if;
	end process;

end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.EventCatcherIfcPackage.all;

entity EventCatcherIfcAxi4Lite is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Axi4LiteDown : in T_EventCatcherIfcAxi4LiteDown;
		Axi4LiteUp : out T_EventCatcherIfcAxi4LiteUp;
		Axi4LiteAccess : out T_EventCatcherIfcAxi4LiteAccess;
		Trace : out T_EventCatcherIfcTrace;
		EventCatcherBlkDown : out T_EventCatcherIfcEventCatcherBlkDown;
		EventCatcherBlkUp : in T_EventCatcherIfcEventCatcherBlkUp
	);
end;

architecture Behavioural of EventCatcherIfcAxi4Lite is

	signal PreAxi4LiteUp : T_EventCatcherIfcAxi4LiteUp;
	signal PreAxi4LiteAccess : T_EventCatcherIfcAxi4LiteAccess;
	
	signal UnoccupiedAck : std_logic;
	signal TimeoutAck : std_logic;
	
	signal ReadMatch : std_logic;
	signal ReadAck : std_logic;
	signal ReadData : std_logic_vector(31 downto 0);
	signal ReadResp : std_logic_vector(1 downto 0);
	signal Read : std_logic;
	signal ReadAddressMatch : std_logic;
	signal ReadAddressProt : std_logic_vector(2 downto 0);
	signal ReadAddress : std_logic_vector(3 downto 0);
	signal WriteMatch : std_logic;
	signal WriteAck : std_logic;
	signal WriteResp : std_logic_vector(1 downto 0);
	signal Write : std_logic;
	signal WriteAddrMatch : std_logic;
	signal WriteAddressProt : std_logic_vector(2 downto 0);
	signal WriteAddress : std_logic_vector(3 downto 0);
	signal WriteData : std_logic_vector(31 downto 0);
	signal WriteStrobe : std_logic_vector(3 downto 0);
	
	signal EventCatcherBlkReadMatch : std_logic;
	signal EventCatcherBlkReadAck : std_logic;
	signal EventCatcherBlkReadData : std_logic_vector(31 downto 0);
	signal EventCatcherBlkReadResp : std_logic_vector(1 downto 0);
	signal EventCatcherBlkWriteMatch : std_logic;
	signal EventCatcherBlkWriteAck : std_logic;
	signal EventCatcherBlkWriteResp : std_logic_vector(1 downto 0);

begin

	i_EventCatcherIfcAxi4LiteBusController : entity work.EventCatcherIfcAxi4LiteBusController
		port map (
			Clk => Clk,
			Rst => Rst,
			AWVALID => Axi4LiteDown.AWVALID,
			AWADDR => Axi4LiteDown.AWADDR,
			AWPROT => Axi4LiteDown.AWPROT,
			AWREADY => PreAxi4LiteUp.AWREADY,
			WVALID => Axi4LiteDown.WVALID,
			WDATA => Axi4LiteDown.WDATA,
			WSTRB => Axi4LiteDown.WSTRB,
			WREADY => PreAxi4LiteUp.WREADY,
			BREADY => Axi4LiteDown.BREADY,
			BVALID => PreAxi4LiteUp.BVALID,
			BRESP => PreAxi4LiteUp.BRESP,
			ARVALID => Axi4LiteDown.ARVALID,
			ARADDR => Axi4LiteDown.ARADDR,
			ARPROT => Axi4LiteDown.ARPROT,
			ARREADY => PreAxi4LiteUp.ARREADY,
			RREADY => Axi4LiteDown.RREADY,
			RVALID => PreAxi4LiteUp.RVALID,
			RDATA => PreAxi4LiteUp.RDATA,
			RRESP => PreAxi4LiteUp.RRESP,
			WritePrivileged => PreAxi4LiteAccess.WritePrivileged,
			WriteSecure => PreAxi4LiteAccess.WriteSecure,
			WriteInstruction => PreAxi4LiteAccess.WriteInstruction,
			ReadPrivileged => PreAxi4LiteAccess.ReadPrivileged,
			ReadSecure => PreAxi4LiteAccess.ReadSecure,
			ReadInstruction => PreAxi4LiteAccess.ReadInstruction,
			ReadMatch => ReadMatch,
			ReadAck => ReadAck,
			ReadData => ReadData,
			ReadResp => ReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => WriteMatch,
			WriteAck => WriteAck,
			WriteResp => WriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteStrobe => WriteStrobe,
			UnoccupiedAck => UnoccupiedAck,
			TimeoutAck => TimeoutAck
		);
	
	i_EventCatcherBlk_EventCatcherIfc : entity work.EventCatcherBlk_EventCatcherIfc
		port map (
			Clk => Clk,
			Rst => Rst,
			ReadMatch => EventCatcherBlkReadMatch,
			ReadAck => EventCatcherBlkReadAck,
			ReadData => EventCatcherBlkReadData,
			ReadResp => EventCatcherBlkReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => EventCatcherBlkWriteMatch,
			WriteAck => EventCatcherBlkWriteAck,
			WriteResp => EventCatcherBlkWriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteStrobe => WriteStrobe,
			Mask => EventCatcherBlkDown.Mask,
			CatchToBeRead => EventCatcherBlkUp.CatchToBeRead,
			CatchWritten => EventCatcherBlkDown.CatchWritten,
			WTransPulseEventCatchReg => EventCatcherBlkDown.WTransPulseEventCatchReg,
			OverrunToBeRead => EventCatcherBlkUp.OverrunToBeRead,
			OverrunWritten => EventCatcherBlkDown.OverrunWritten,
			WTransPulseEventOverrunReg => EventCatcherBlkDown.WTransPulseEventOverrunReg
		);
	
	Axi4LiteUp <= PreAxi4LiteUp;
	Axi4LiteAccess <= PreAxi4LiteAccess;
	
	Trace.Axi4LiteDown <= Axi4LiteDown;
	Trace.Axi4LiteUp <= PreAxi4LiteUp;
	Trace.Axi4LiteAccess <= PreAxi4LiteAccess;
	Trace.UnoccupiedAck <= UnoccupiedAck;
	Trace.TimeoutAck <= TimeoutAck;
	
	ReadMatch <= EventCatcherBlkReadMatch;
	ReadAck <= EventCatcherBlkReadAck;
	ReadResp <= EventCatcherBlkReadResp;
	ReadData <= EventCatcherBlkReadData;
	WriteMatch <= EventCatcherBlkWriteMatch;
	WriteAck <= EventCatcherBlkWriteAck;
	WriteResp <= EventCatcherBlkWriteResp;

end;
