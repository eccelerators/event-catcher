//******************************************************************************
//
//                  /------o
//            eccelerators
//         o------/
//
// This file is an Eccelerators GmbH sample project.
//
// MIT License:
// Copyright (c) 2023 Eccelerators GmbH
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//******************************************************************************
use Eccelerators.Library.Base.*;

namespace Eccelerators.Library.Base
{

	block EventCatcherBlk
	{
		Name = "Event Catcher Block";
		Description = "
			This block defines a basic event catcher e.g. to convert **egde triggered** interrupt sources 
            to **level triggered** interrupt sources.	
            Its purpose is to be inherited by implementations of e.g., GPIO, Timer or Interrupt controllers 
            utilizing this function.
            
            SW-operation flow:
			 
			.. figure:: resources/SwFlow.png
			   :scale: 9
			   
			   SW-operation flow		 	 
		";
		Registers = [
			EventCatcherBlk.EventMaskReg,
			EventCatcherBlk.EventCatchReg,
			EventCatcherBlk.EventOverrunReg
		];

		register EventMaskReg
		{
			Name = "Event Mask Register";
			Width = 32;
			Bits = [
				Mask
			];
			
			enum Mask
			{
				Width = 4;
				Values = [
					Enabled,
					Disabled
				];
				value Enabled
				{
					Value = 0x1;
					Description = "Event is catched and forwarded.";
				}
			
				value Disabled
				{
					Value = 0x0;
					Description = "Event is ignored.";
				}							
			}	
			
		}

		register EventCatchReg
		{
			Name = "Event Catch Register";
			Width = 32;
			Bits = [
				Catch
			];
			
			WriteTransparentPulse = true;
			
			enum Catch
			{
				Behaviour = BitBehaviour.Transparent;
				Width = 4;
				Values = [
					Catched,
					NotCatched,
					Confirmed,
					InEffective
				];
				value Catched
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Read;
					Description = "An event has been catched and is waiting to be processed.";
				}
			
				value NotCatched
				{
					Value = 0x0;
					Behaviour = ValueBehaviour.Read;
					Description = "No event has been catched.";
				}
				value Confirmed
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Write;
					Name = "Notifies HW that a catched event has been processed by SW.";
					Description = "
						SW writes Confirmed to confirm to HW that a catched event has been processed.
						The value isn't stored, thus there is no need to reset it to '0' again.	
						Solely the write action is sufficient.	
						";
				}
				value InEffective
				{
					Name = "Writing this value has no effect.";
					Behaviour = ValueBehaviour.Write;
					Value = 0x0;
				}
				
				Resets = {
				0b0:  BusReset.Async (Behaviour = ResetBehaviour.Read,  
						Description = "
							The bit Catch is set to NotCatched after reset in the usually attached EventCatcher HW block.")			
				};	
				
			}	
		}
	
		register EventOverrunReg
		{
			Name = "Event Overrun Register";
			Width = 32;
			Bits = [
				Overrun
			];
			WriteTransparentPulse = true;
			
			
			enum Overrun
			{
				Behaviour = BitBehaviour.Transparent;
				Width = 4;
				Values = [
					Happened,
					NotHappened,
					Confirmed,
					InEffective
				];				
				value Happened
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Read;
					Description = "
						There has been a new event before a catched event had been processed 
						thus an overrun has happened and at least one event has been lost.";
				}
			
				value NotHappened
				{
					Value = 0x0;
					Behaviour = ValueBehaviour.Read;
					Description = "No event has been lost.";
				}
		
				value Confirmed
				{
					Value = 0x1;
					Behaviour = ValueBehaviour.Write;
					Name = "Notifies HW that a event overrun has been processed by SW.";
					Description = "
						SW writes Confirmed to confirm to HW that a event overrun has been processed.
						The value isn't stored, thus there is no need to reset it to '0' again.	
						Solely the write action is sufficient.	
						";
				}
				value InEffective
				{
					Name = "Writing this value has no effect.";
					Behaviour = ValueBehaviour.Write;
					Value = 0x0;
				}
				
				Resets = {
				0b0:  BusReset.Async (Behaviour = ResetBehaviour.Read,  
						Description = "
							The bit Overrun is set to NotHappened after reset in the usually attached EventCatcher HW block.")			
				};	
				
			}
		}	
	}

}


